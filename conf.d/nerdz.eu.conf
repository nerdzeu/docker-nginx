# Define function used to replace spaces (or plus sign) with + instead of the plus sign

perl_set $profile 'sub {
    my $uri = shift->uri;
    $uri =~ s/%2b/+/ig;

    return "$1" if $uri =~ /^\/(.+?)\.$/;
    return "$1&pid=$2" if $uri =~ /^\/(.+?)\.(\d+)$/;
    return "$1&action=$2" if $uri =~ /^\/(.+?)\.(friends|followers|following|interactions)$/;
    return "$1&action=$2&$3" if $uri =~ /^\/(.+?)\.(friends|followers|following|interactions)\?(.*)$/;
}';


perl_set $project 'sub {
    my $uri = shift->uri;
    $uri =~ s/%2b/+/ig;

    return "$1" if $uri =~ /^\/(.+?):$/;
    return "$1&pid=$2" if $uri =~ /^\/(.+?):(\d+)$/;
    return "$1&action=$2" if $uri =~ /^\/(.+?):(followers|members|interactions)$/;
    return "$1&action=$2&$3" if $uri =~ /^\/(.+?):(followers|members|interactions)\?(.*)$/;
}';


# main server https://www.root
server {
    server_name www.nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; #443
    #listen 80;
    root /srv/http/www.nerdz.eu;
    include conf.d/nerdz.eu/frontend.conf;
}

# https://mobile
server {
    server_name mobile.nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; # 443
    #listen 80;
    root /srv/http/mobile.nerdz.eu;
    include conf.d/nerdz.eu/frontend.conf;
}

# https://static
server {
    server_name static.nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; # 443
    #listen 80;
    root /srv/http/static.nerdz.eu;

    # add charset=utf-8 to http response
    charset utf-8;

    # turn base_url//resoruce into base_url/resource
    merge_slashes on;

    # cache full uri, not only filename without parameters
    proxy_cache_key "$scheme$host$uri$is_args$args";

    location ~ (api|captcha|invalidImgUrl|onErrorImg)\.php$ {
        expires max;
        include conf.d/nerdz.eu/php-fpm.conf;
    }

    location ~ /(static|tpl) {
        # enable gzip compression
        gzip on;
        # compress js, css files
        gzip_types text/javascript application/javascript text/css;
        # add resonse header "Vary: Accept-Encoding"
        gzip_vary on;

        expires max;
    }

    location / {
        return 302 $scheme://www.nerdz.eu/error.php?code=403;
    }
}

##### Reverse proxies #####

# media.nerdz.eu/camo -> localhost:8081

# this upstream is required
# because somehow when using docker
# nginx is not able to resolve the camo host
# when is used in a location ~
# Thus we make it resolve here
upstream camonet {
    server camo:8081;
}

server {
    server_name media.nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; #443
    #listen 80;

    # turn base_url//resoruce into base_url/resource
    merge_slashes on;

    real_ip_header    X-Real-IP;
    real_ip_recursive on;
    client_max_body_size 50M;

    location ~ ^/camo/(.*)$ {
        proxy_pass  http://camonet/$1$is_args$args;
    }
}

# api.nerdz.eu -> localhost:8088
# api.nerdz.eu/docs -> localhost: 40455
server {
    server_name api.nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; #443
    #listen 80;

    # turn base_url//resoruce into base_url/resource
    merge_slashes on;

    real_ip_header    X-Real-IP;
    real_ip_recursive on;

    location / {
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "HEAD, GET, OPTIONS, POST, PUT, DELETE";
        add_header Access-Control-Allow-Headers X-CORS-Status;
        proxy_pass  http://api:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-Start $msec;
    }

    location ~ /(docs|swagger.json) {
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "HEAD, GET, OPTIONS, POST, PUT, DELETE";
        add_header Access-Control-Allow-Headers X-CORS-Status;
        proxy_pass  http://apidoc:40455;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-Start $msec;
    }
}

# redirect http(s)://root to http(s)://www.root
server {
    server_name nerdz.eu;
    include conf.d/nerdz.eu/ssl_root.conf; #443
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 $scheme://www.$host$request_uri;
    }
}

##### HTTP->HTTPS redirects #####

# redirect http://media to https://media
server {
    server_name media.nerdz.eu;
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# redirect http://www. to https://www.root
server {
    server_name www.nerdz.eu;
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# redirect http://mobile to https://mobile
server {
    server_name mobile.nerdz.eu;
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# redirect http://static to https://static
server {
    server_name static.nerdz.eu;
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# redirect http://api to https://api
server {
    server_name api.nerdz.eu;
    listen 80;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}
